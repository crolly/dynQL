{{- $single := .Model.Ident.Singularize -}}
{{- $singleCamel := $single.Camelize -}}
{{- $singlePascal := $single.Pascalize -}}
{{- $first := First $single.Camelize -}}
{{- $plural := .Model.Ident.Pluralize -}}
{{- $pluralCamel := $plural.Camelize -}}
{{- $pluralPascal := $plural.Pascalize -}}
{{- $hash := Underscore (index .Model.KeySchema "HASH") -}}
{{- $range := Underscore (index .Model.KeySchema "RANGE") -}}
{{- $hashAttr := Pascalize (index .Model.KeySchema "HASH") -}}
{{- $rangeAttr := Pascalize (index .Model.KeySchema "RANGE") -}}
{{- $composite := .Model.CompositeKey -}}
package schema_test

import (
	"fmt"
	"os"
	"testing"

	"github.com/mitchellh/mapstructure"

	"github.com/crolly/structs"
	"github.com/gofrs/uuid"	

	"github.com/stretchr/testify/assert"

	"{{.Config.ImportPath}}/handler/{{.Schema}}/schema"
	"{{.Config.ImportPath}}/models"
	"{{.Config.ImportPath}}/services"
	"github.com/graphql-go/graphql"
)

var (
	{{$singleCamel}}TestSelects = map[string]interface{}{
		"{{$hash}}": true,	
		{{- if $composite }}
		"{{$range}}": true, 
		{{- end }}
	}
)

func init() {
	os.Setenv("{{$single.ToUpper}}_TABLE_NAME", "{{.Config.ProjectName}}-{{$pluralCamel}}-test")
}

func new{{$singlePascal}}Model() *models.{{$singlePascal}} {
	// you can add fake data here
	return &models.{{$singlePascal}}{
		{{$hashAttr}}: uuid.Must(uuid.NewV4()).String(),
		{{- if $composite }}
		{{$rangeAttr}}: uuid.Must(uuid.NewV4()).String(), 
		{{- end }}
	}
}

func new{{$singlePascal}}ModelSlice() []*models.{{$singlePascal}} {
	s := []*models.{{$singlePascal}}{}
	for i := 0; i < 10; i++ {
		s = append(s, new{{$singlePascal}}Model())
	}

	return s
}

func cleanup{{$singlePascal}}Model({{$first}} *models.{{$singlePascal}}) error {
	params := graphql.ResolveParams{
		Args: map[string]interface{}{
			"{{ $hash }}": {{$first}}.{{$hashAttr}},
			{{- if $composite}}
			"{{ $range }}": {{$first}}.{{$rangeAttr}},
			{{- end}}	
		},
	}
	return models.Delete{{$singlePascal}}(params)
}

func cleanup{{$singlePascal}}Slice(s []*models.{{$singlePascal}}) []error {
	errs := []error{}
	for _, {{$first}} := range s {
		err := cleanup{{$singlePascal}}Model({{$first}})
		if err != nil {
			errs = append(errs, err)
		}
	}

	return errs
}

func TestList{{$pluralPascal}}(test *testing.T) {
	// Test List{{$pluralPascal}}
	expected := []*models.{{$singlePascal}}{}
	err := services.{{$singlePascal}}Service("{{$hash}}"{{if $composite}}, "{{$range}}"{{end}}).Scan(&expected, {{$singleCamel}}TestSelects)
	assert.NoError(test, err)

	q := TestQuery{
		Query: `query {
			{{$pluralPascal}} {
				{{ $hash }}
				{{- if $composite}}
				{{ $range }}
				{{- end}}
			}
		}`,
	}
	params := graphql.Params{
		Schema:         schema.Schema,
		VariableValues: q.Variables,
		RequestString:  q.Query,
	}
	result := graphql.Do(params)
	assert.Equal(test, 0, len(result.Errors))

	actual := []*models.{{$singlePascal}}{}
	models.Decode(result.Data.(map[string]interface{})["{{$pluralPascal}}"], &actual)

	assert.ElementsMatch(test, expected, actual)

	cleanup{{$singlePascal}}Slice(actual)
}


func TestCreateAndRead{{$singlePascal}}(test *testing.T) {
	// Test Put{{$singlePascal}}
	expected := new{{$singlePascal}}Model()
	q := TestQuery{
		Query: `mutation create{{$singlePascal}}(${{$first}}: {{$singlePascal}}Input){
			{{$singlePascal}}({{$singleCamel}}:${{$first}}){
			  {{ $hash }}
			  {{- if $composite}}
			  {{ $range }}
			  {{- end}}
			}
		  }`,
		Variables: map[string]interface{}{
			"{{$first}}": structs.Map(expected),
		},
	}

	params := graphql.Params{
		Schema:         schema.Schema,
		VariableValues: q.Variables,
		RequestString:  q.Query,
	}
	result := graphql.Do(params)
	for _, e := range result.Errors {
		fmt.Println(e)
	}

	assert.Equal(test, 0, len(result.Errors))

	// Test Read{{$pluralPascal}}
	hashKey := expected.{{$hashAttr}}
	{{- if $composite}}
	rangeKey := expected.{{$rangeAttr}}
	{{- end}}
	q = TestQuery{
		Query: fmt.Sprintf(`query {
			{{$singlePascal}}({{$hash}}: "%s"{{if $composite}}, {{$range}}: "%s"{{end}}) {
				{{ $hash }}
				{{- if $composite}}
				{{ $range }}
				{{- end}}
			}
		}`, hashKey{{if $composite}}, rangeKey{{end}}),
	}
	params = graphql.Params{
		Schema:         schema.Schema,
		VariableValues: q.Variables,
		RequestString:  q.Query,
	}
	result = graphql.Do(params)
	assert.Equal(test, 0, len(result.Errors))

	actual := &models.{{$singlePascal}}{}
	models.Decode(result.Data.(map[string]interface{})["{{$singlePascal}}"], &actual)

	assert.Equal(test, expected, actual)

	cleanup{{$singlePascal}}Model(actual)
}

func TestDelete{{$singlePascal}}(test *testing.T) {
	{{$first}} := new{{$singlePascal}}Model()
	err := services.{{$singlePascal}}Service("{{$hash}}"{{if $composite}}, "{{$range}}"{{end}}).Put({{$first}})
	assert.NoError(test, err)

	hashKey := {{$first}}.{{$hashAttr}}
	{{- if $composite}}
	rangeKey := {{$first}}.{{$rangeAttr}}
	{{- end}}
	q := TestQuery{
		Query: fmt.Sprintf(`mutation {
			delete{{$singlePascal}}({{$hash}}: "%s"{{if $composite}}, {{$range}}: "%s"{{end}}) {
				{{ $hash }}
				{{- if $composite}}
				{{ $range }}
				{{- end}}
			}
		}`, hashKey{{if $composite}}, rangeKey{{end}}),
	}
	params := graphql.Params{
		Schema:         schema.Schema,
		VariableValues: q.Variables,
		RequestString:  q.Query,
	}
	result := graphql.Do(params)
	assert.Equal(test, 0, len(result.Errors))

	actual := &models.{{$singlePascal}}{}
	err = services.{{$singlePascal}}Service("{{$hash}}"{{if $composite}}, "{{$range}}"{{end}}).Get({{$first}}.{{$hashAttr}}{{if $composite}}, {{$first}}.{{$rangeAttr}}{{end}}, actual, {{$singleCamel}}TestSelects)
	assert.Error(test, err, "dynamo: no item found")
}