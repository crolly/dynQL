{{- $single := .Model.Ident.Singularize -}}
{{- $singleCamel := $single.Camelize -}}
{{- $singlePascal := $single.Pascalize -}}
{{- $plural := .Model.Ident.Pluralize -}}
{{- $pluralCamel := $plural.Camelize -}}
{{- $pluralPascal := $plural.Pascalize -}}
{{- $hash := Underscore (index .Model.KeySchema "HASH") -}}
{{- $range := Underscore (index .Model.KeySchema "RANGE") -}}
{{- $hashAttr := Pascalize (index .Model.KeySchema "HASH") -}}
{{- $rangeAttr := Pascalize (index .Model.KeySchema "RANGE") -}}
{{- $composite := .Model.CompositeKey -}}
package schema_test

import (
	"fmt"
	"os"
	"testing"

	"github.com/mitchellh/mapstructure"

	"github.com/crolly/structs"
	"github.com/gofrs/uuid"	

	"github.com/stretchr/testify/assert"

	"{{.Config.ImportPath}}/handler/{{.Schema}}/schema"
	"{{.Config.ImportPath}}/models"
	"github.com/graphql-go/graphql"
)

func init() {
	os.Setenv("{{$single.ToUpper}}_TABLE_NAME", "{{.Config.ProjectName}}-{{$pluralCamel}}-test")
}

func cleanupModel(m models.{{$singlePascal}}) error {
	params := graphql.ResolveParams{
		Args: map[string]interface{}{
			"{{ $hash }}": m.{{$hashAttr}},
			{{- if $composite}}
			"{{ $range }}": m.{{$rangeAttr}},
			{{- end}}	
		},
	}
	return models.Delete{{$singlePascal}}(params)
}

func cleanupSlice() {
	
}

func TestPut{{$singlePascal}}(t *testing.T) {
	// enter test data
	expected := models.{{$singlePascal}}{
		{{$hashAttr}}: uuid.Must(uuid.NewV4()).String(),
		{{- if $composite}}
		{{$rangeAttr}}: uuid.Must(uuid.NewV4()).String(),
		{{- end}}
	}
	q := TestQuery{
		Query: `mutation create{{$singlePascal}}($m: {{$singlePascal}}Input){
			{{$singlePascal}}({{$singleCamel}}:$m){
			  {{ $hash }}
			  {{- if $composite}}
			  {{ $range }}
			  {{- end}}
			}
		  }`,
		Variables: map[string]interface{}{
			"m": structs.Map(expected),
		},
	}

	params := graphql.Params{
		Schema:         schema.Schema,
		VariableValues: q.Variables,
		RequestString:  q.Query,
	}
	result := graphql.Do(params)
	for _, e := range result.Errors {
		fmt.Println(e)
	}

	assert.Equal(t, 0, len(result.Errors))
	actual := models.{{$singlePascal}}{}
	err := mapstructure.Decode(result.Data.(map[string]interface{})["Room"], &actual)
	assert.NoError(t, err)
	assert.Equal(t, expected, actual)

	err = cleanupModel(expected)
	assert.NoError(t, err)
}

func TestList{{$singlePascal}}s(t *testing.T) {
	q := TestQuery{
		Query: `query {
			{{$pluralPascal}} {
			  {{ $hash }}
			  {{- if $composite}}
			  {{ $range }}
			  {{- end}}
			}
		  }`,
	}
	params := graphql.Params{
		Schema:         schema.Schema,
		VariableValues: q.Variables,
		RequestString:  q.Query,
	}
	result := graphql.Do(params)

	for _, e := range result.Errors {
		fmt.Println(e)
	}

	assert.Equal(t, 0, len(result.Errors))
}

// TODO: Implement TestRead + TestDelete