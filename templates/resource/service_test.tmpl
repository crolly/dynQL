{{- $single := .Model.Ident.Singularize -}}
{{- $singleCamel := $single.Camelize.String -}}
{{- $singlePascal := $single.Pascalize.String -}}
{{- $singleUpper := $single.ToUpper.String -}}
{{- $plural := .Model.Ident.Pluralize -}}
{{- $pluralCamel := $plural.Camelize.String -}}
{{- $pluralPascal := $plural.Pascalize.String -}}
{{- $first := First $single.Camelize -}}
{{- $hashAttr := Pascalize (index .Model.KeySchema "HASH") -}}
{{- $hash := Underscore (index .Model.KeySchema "HASH") -}}
{{- $rangeAttr := Pascalize (index .Model.KeySchema "RANGE") -}}
{{- $range := Underscore (index .Model.KeySchema "RANGE") -}}
{{- $composite := .Model.CompositeKey -}}
package services_test

import (
	"os"
	"testing"

	"github.com/stretchr/testify/assert"

	"{{.Config.ImportPath}}/models"
	"{{.Config.ImportPath}}/services"
	"github.com/gofrs/uuid"
)

var (
	{{$singleCamel}}TestSelects = map[string]interface{}{
		"{{$hash}}": true,	
		{{- if $composite }}
		"{{$range}}": true, 
		{{- end }}
	}

	sliceLength = 10
)

func init() {
	os.Setenv("LOCAL", "true")
	os.Setenv("ENDPOINT", "http://localhost:8000")
	os.Setenv("REGION", "{{.Config.Region}}")
    os.Setenv("{{$singleUpper}}_TABLE_NAME", "{{.Config.ProjectName}}-{{$pluralCamel}}-test")
}

func new{{$singlePascal}}Model() *models.{{$singlePascal}} {
	// you can add fake data here
	return &models.{{$singlePascal}}{
		{{$hashAttr}}: uuid.Must(uuid.NewV4()).String(),
		{{- if $composite }}
		{{$rangeAttr}}: uuid.Must(uuid.NewV4()).String(), 
		{{- end }}
	}
}

func new{{$singlePascal}}ModelSlice() []*models.{{$singlePascal}} {
	s := []*models.{{$singlePascal}}{}
	for i := 0; i < sliceLength; i++ {
		s = append(s, new{{$singlePascal}}Model())
	}

	return s
}

func cleanup{{$singlePascal}}Model({{$first}} *models.{{$singlePascal}}) error {
	return services.{{$singlePascal}}Service("{{$hash}}"{{if $composite}}, "{{$range}}"{{end}}).Delete({{$first}}.{{$hashAttr}}{{if $composite}}, {{$first}}.{{$rangeAttr}}{{end}})
}

func cleanup{{$singlePascal}}Slice(s []*models.{{$singlePascal}}) []error {
	errs := []error{}
	for _, {{$first}} := range s {
		err := cleanup{{$singlePascal}}Model({{$first}})
		if err != nil {
			errs = append(errs, err)
		}
	}

	return errs
}

func TestPutAndGet{{$singlePascal}}(test *testing.T) {
	expected := new{{$singlePascal}}Model()
	err := services.{{$singlePascal}}Service("{{$hash}}"{{if $composite}}, "{{$range}}"{{end}}).Put(expected)
	assert.NoError(test, err)

	actual := &models.{{$singlePascal}}{}
	err = services.{{$singlePascal}}Service("{{$hash}}"{{if $composite}}, "{{$range}}"{{end}}).Get(expected.{{$hashAttr}}, actual, {{$singleCamel}}TestSelects)
	assert.NoError(test, err)

	assert.Equal(test, expected, actual)	

	cleanup{{$singlePascal}}Model(expected)
}

func TestList{{$pluralPascal}}(test *testing.T) {
	expected := new{{$singlePascal}}ModelSlice()
	for _, {{$first}} := range expected {
		err := services.{{$singlePascal}}Service("{{$hash}}"{{if $composite}}, "{{$range}}"{{end}}).Put({{$first}})
		assert.NoError(test, err)	
	}

	actual := []*models.{{$singlePascal}}{}
	err := services.{{$singlePascal}}Service("{{$hash}}"{{if $composite}}, "{{$range}}"{{end}}).Scan(&actual, {{$singleCamel}}TestSelects)
	assert.NoError(test, err)
	assert.ElementsMatch(test, expected, actual)

	errs := cleanup{{$singlePascal}}Slice(actual)
	assert.Empty(test, errs)
}

func TestDeleteAndGetNonExistent{{$singlePascal}}(test *testing.T) {
	{{$first}} := new{{$singlePascal}}Model()
	err := services.{{$singlePascal}}Service("{{$hash}}"{{if $composite}}, "{{$range}}"{{end}}).Put({{$first}})
	assert.NoError(test, err)

	err = services.{{$singlePascal}}Service("{{$hash}}"{{if $composite}}, "{{$range}}"{{end}}).Delete({{$first}}.{{$hashAttr}}{{if $composite}}, {{$first}}.{{$rangeAttr}}{{end}})
	assert.NoError(test, err)

	actual := &models.{{$singlePascal}}{}
	err = services.{{$singlePascal}}Service("{{$hash}}"{{if $composite}}, "{{$range}}"{{end}}).Get({{$first}}.{{$hashAttr}}, actual, {{$singleCamel}}TestSelects)
	assert.Error(test, err, "dynamo: no item found")

}
