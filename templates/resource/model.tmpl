package models

import (
	"fmt"
	"reflect"

	"github.com/gobuffalo/flect"

	"github.com/graphql-go/graphql"
	"github.com/graphql-go/graphql/language/ast"
)

type objectConfigType int

const (
	inputConfig objectConfigType = iota
	objectConfig
)

func graphQLType(in interface{}) *graphql.Object {
	return getObjectConfig(in, objectConfig).(*graphql.Object)
}

func graphQLInputType(in interface{}) *graphql.InputObject {
	return getObjectConfig(in, inputConfig).(*graphql.InputObject)
}

func getObjectConfig(in interface{}, oct objectConfigType) interface{} {
	t := getElemType(in)
	tName := t.Name()
	desc := fmt.Sprintf("Representation of the %s object", tName)
	// fields := getFieldDef(in, oct)
	def := getFieldDef(in, oct)

	switch oct {
	case inputConfig:
		fields := graphql.InputObjectConfigFieldMap{}
		for fn, ft := range def {
			fields[fn] = &graphql.InputObjectFieldConfig{
				Type:        ft,
				Description: fmt.Sprintf("The %s field of the %s", flect.Humanize(fn), tName),
			}
		}
		return graphql.NewInputObject(graphql.InputObjectConfig{
			Name:        tName + "Input",
			Description: desc,
			Fields:      fields,
		})
	case objectConfig:
		fields := graphql.Fields{}
		for fn, ft := range def {
			fields[fn] = &graphql.Field{
				Type:        ft,
				Description: fmt.Sprintf("The %s field of the %s", flect.Humanize(fn), tName),
			}
		}
		return graphql.NewObject(graphql.ObjectConfig{
			Name:        tName,
			Description: desc,
			Fields:      fields,
		})
	}

	return nil
}

func getElemType(in interface{}) reflect.Type {
	for t := reflect.TypeOf(in); ; {
		switch t.Kind() {
		case reflect.Array, reflect.Map, reflect.Ptr, reflect.Slice:
			t = t.Elem()
		default:
			return t
		}
	}
}

func getFieldDef(in interface{}, oct objectConfigType) map[string]graphql.Output {
	def := map[string]graphql.Output{}

	t := getElemType(in)
	for i := 0; i < t.NumField(); i++ {
		f := t.Field(i)
		switch f.Type.Kind() {
		case reflect.Bool:
			def[flect.Underscore(f.Name)] = graphql.Boolean
		case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64,
			reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64:
			def[flect.Underscore(f.Name)] = graphql.Int
		case reflect.Float32, reflect.Float64:
			def[flect.Underscore(f.Name)] = graphql.Float
		case reflect.String:
			def[flect.Underscore(f.Name)] = graphql.String
		case reflect.Struct:
			s := reflect.New(f.Type).Interface()
			switch oct {
			case inputConfig:
				def[flect.Underscore(f.Name)] = graphQLInputType(s)
			case objectConfig:
				def[flect.Underscore(f.Name)] = graphQLType(s)
			}
		case reflect.Slice, reflect.Array:
			s := reflect.New(f.Type).Interface()
			switch oct {
			case inputConfig:
				def[flect.Underscore(f.Name)] = graphql.NewList(graphQLInputType(s))
			case objectConfig:
				def[flect.Underscore(f.Name)] = graphql.NewList(graphQLType(s))
			}
		}
	}

	return def
}

func getSelectedFields(params graphql.ResolveParams) (map[string]interface{}, error) {
	fieldASTs := params.Info.FieldASTs
	if len(fieldASTs) == 0 {
		return nil, fmt.Errorf("getSelectedFields: ResolveParams has no fields")
	}
	return selectedFieldsFromSelections(params, fieldASTs[0].SelectionSet.Selections)
}

func selectedFieldsFromSelections(params graphql.ResolveParams, selections []ast.Selection) (selected map[string]interface{}, err error) {
	selected = map[string]interface{}{}

	for _, s := range selections {
		switch s := s.(type) {
		case *ast.Field:
			if s.SelectionSet == nil {
				selected[s.Name.Value] = true
			} else {
				selected[s.Name.Value], err = selectedFieldsFromSelections(params, s.SelectionSet.Selections)
				if err != nil {
					return
				}
			}
		case *ast.FragmentSpread:
			n := s.Name.Value
			frag, ok := params.Info.Fragments[n]
			if !ok {
				err = fmt.Errorf("getSelectedFields: no fragment found with name %v", n)

				return
			}
			selected[s.Name.Value], err = selectedFieldsFromSelections(params, frag.GetSelectionSet().Selections)
			if err != nil {
				return
			}
		default:
			err = fmt.Errorf("getSelectedFields: found unexpected selection type %v", s)

			return
		}
	}

	return
}
