package services

import (
	"fmt"
	"os"
	"reflect"
	"strconv"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/guregu/dynamo"
)

type dynamoService struct {
	tableName string
	hashName  string
	rangeName string
	composite bool
}

type operation int

const (
	dynamoServicePut = iota
	dynamoServiceGet
	dynamoServiceDelete
	dynamoServiceScan
	dynamoServiceQuery
)

func (d dynamoService) connect() *dynamo.DB {
	sess := session.New()
	conf := &aws.Config{}
	if local, err := strconv.ParseBool(os.Getenv("LOCAL")); err == nil && local {
		conf.Endpoint = aws.String(os.Getenv("ENDPOINT"))
		conf.Region = aws.String(os.Getenv("REGION"))
	}

	return dynamo.New(sess, conf)
}

func (d dynamoService) getProjection(selects map[string]interface{}) []string {
	proj := []string{}
	for k := range selects {
		// only first-level supported
		proj = append(proj, "'"+k+"'")
		{{/* // TODO: support nested selections
		if b, ok := v.(bool); ok && b {
			proj = append(proj, "'"+k+"'")
		} else {
			if v, ok := v.(map[string]interface{}); ok {
				proj = append(proj, d.getNestedProjection(k, v)...)
			}
		} */}}
	}

	return proj
}

{{/* func (d dynamoService) getNestedProjection(parent string, selects map[string]interface{}) []string {
	s := []string{}
	for k, v := range selects {
		if b, ok := v.(bool); ok && b {
			s = append(s, fmt.Sprintf("'%s'.'%s'", parent, k))
		} else {
			if v, ok := v.(map[string]interface{}); ok {
				s = append(s, d.getNestedProjection(fmt.Sprintf("'%s.'%s", parent, k), v)...)
			}
		}
	}

	return s
} */}}

func batch(in interface{}, batchSize int) ([][]interface{}, error) {
	t := reflect.TypeOf(in)
	switch t.Kind() {
	case reflect.Slice:
		s := reflect.ValueOf(in)
		// duplicate initial slice
		sd := make([]interface{}, s.Len())
		for i := 0; i < s.Len(); i++ {
			sd[i] = s.Index(i).Interface()
		}

		out := [][]interface{}{}
		for batchSize < len(sd) {
			sd, out = sd[batchSize:], append(out, sd[0:batchSize:batchSize])
		}
		out = append(out, sd)

		return out, nil
	default:
		return nil, fmt.Errorf("Input must be a Slice")
	}

}

// Put writes the given Model to DynamoDB
func (d dynamoService) Put(in interface{}) error {
	return d.connect().Table(d.tableName).Put(in).Run()
}

// BatchWrite writes a Slice of Models to DynamoDB
func (d dynamoService) BatchWrite(in interface{}, batchSize int) error {
	keys := []string{d.hashName}
	if d.composite {
		keys = append(keys, d.rangeName)
	}

	bs, err := batch(in, batchSize)
	if err != nil {
		return err
	}

	w := d.connect().Table(d.tableName).Batch(keys...).Write()
	for _, b := range bs {
		_, err = w.Put(b...).Run()
		if err != nil {
			return err
		}
	}

	return nil
}

// Get retrieves the Model with the given Keys from DynamoDB
func (d dynamoService) Get(out interface{}, selects map[string]interface{}, keys ...interface{}) error {
	if len(keys) > 2 {
		return fmt.Errorf("Too many Keys provided")
	}
	q := d.connect().Table(d.tableName).Get(d.hashName, keys[0])
	if d.composite {
		q.Range(d.rangeName, dynamo.Equal, keys[1])
	}
	if p := d.getProjection(selects); len(p) > 0 {
		q.Project(p...)
	}
	return q.One(out)
}

// BatchGet retrieves a Slice of Models with the given Keys from DynamoDB
func (d dynamoService) BatchGet(out interface{}, batchSize int, keys ...interface{}) error {
	// make sure is ptr of slice
	v := reflect.ValueOf(out)
	if v.Kind() != reflect.Ptr {
		return fmt.Errorf("out needs to be a pointer of slice")
	}

	e := v.Elem()
	if e.Kind() != reflect.Slice {
		return fmt.Errorf("out is not a pointer of slice but of %s", e.Kind().String())
	}

	hashKey := keys[0]
	if d.composite {
		keys = keys[1:]
	}

	keyBatches, err := batch(keys, batchSize)
	if err != nil {
		return err
	}

	var b dynamo.Batch
	if d.composite {
		b = d.connect().Table(d.tableName).Batch(d.hashName, d.rangeName)
	} else {
		b = d.connect().Table(d.tableName).Batch(d.hashName)
	}

	res := reflect.MakeSlice(e.Type(), 0, 0)
	for _, kb := range keyBatches {
		keys := make([]dynamo.Keyed, len(kb))
		for i, s := range kb {
			if d.composite {
				keys[i] = dynamo.Keys{hashKey, s}
			} else {
				keys[i] = dynamo.Keys{s}
			}
		}

		tmp := reflect.MakeSlice(e.Type(), 0, 0)
		ptr := reflect.New(tmp.Type())
		ptr.Elem().Set(tmp)
		err := b.Get(keys...).All(ptr.Interface())
		if err != nil {
			return err
		}
		res = reflect.AppendSlice(res, ptr.Elem())
	}

	v.Elem().Set(res)

	return nil
}

// Scan retrieves a List of all Models
func (d dynamoService) Scan(out interface{}, selects map[string]interface{}) error {
	s := d.connect().Table(d.tableName).Scan()
	if p := d.getProjection(selects); len(p) > 0 {
		s.Project(p...)
	}

	return s.All(out)
}

// Delete deletes the Model with the given Keys from DynamoDB
func (d dynamoService) Delete(keys ...interface{}) error {
	if len(keys) > 2 {
		return fmt.Errorf("Too many Keys provided")
	}
	del := d.connect().Table(d.tableName).Delete(d.hashName, keys[0])
	if d.composite {
		del.Range(d.rangeName, keys[1])
	}
	return del.Run()
}

// Query retrieves a List of all Models satisfying the hashKey
func (d dynamoService) Query(out interface{}, selects map[string]interface{}, keys ...interface{}) error {
	return d.connect().Table(d.tableName).Get(d.hashName, keys[0]).All(out)
}

// QueryWithRange retrieves a List of all Models satisfying the hashKey and rangeKey condition
func (d dynamoService) QueryWithRange(out interface{}, selects map[string]interface{}, op DynamoOperator, keys ...interface{}) error {
	return d.queryRange(out, selects, op, keys).All(out)
}

// QueryWithIndex calls QueryWithRange with an additionally provided index if the rangeKey condition requires a LSI or GSI
func (d dynamoService) QueryWithIndex(out interface{}, selects map[string]interface{}, index string, op DynamoOperator, keys ...interface{}) error {
	return d.queryRange(out, selects, op, keys).Index(index).All(out)
}

func (d dynamoService) queryRange(out interface{}, selects map[string]interface{}, op DynamoOperator, keys ...interface{}) *dynamo.Query {
	q := d.connect().Table(d.tableName).Get(d.hashName, keys[0]).Range(d.rangeName, dynamo.Operator(op), keys[0])
	if p := d.getProjection(selects); len(p) > 0 {
		q.Project(p...)
	}

	return q
}