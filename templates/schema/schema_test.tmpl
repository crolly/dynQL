package schema_test

import (
	"os"
	"reflect"

	"github.com/gobuffalo/flect"
)

type TestQuery struct {
	Query     string
	Variables map[string]interface{}
}

func init() {
	os.Setenv("LOCAL", "true")
	os.Setenv("ENDPOINT", "http://localhost:8000")
	os.Setenv("REGION", "eu-central-1")
}

func marshal(i interface{}) map[string]interface{} {
	t := reflect.TypeOf(i)
	v := reflect.ValueOf(i)
	if t.Kind() != reflect.Struct {
		return map[string]interface{}{
			t.Name(): v.Interface(),
		}
	}

	res := map[string]interface{}{}
	for i := 0; i < t.NumField(); i++ {
		f := v.Field(i)
		k := f.Kind()
		if k == reflect.Struct {
			res[flect.Underscore(t.Field(i).Name)] = marshal(f.Interface())
		} else if k == reflect.Slice {
			res[flect.Underscore(t.Field(i).Name)] = marshalSlice(f.Interface())
		} else {
			res[flect.Underscore(t.Field(i).Name)] = f.Interface()
		}
	}

	return res
}

func marshalSlice(i interface{}) []map[string]interface{} {
	t := reflect.TypeOf(i)
	v := reflect.ValueOf(i)
	if t.Kind() != reflect.Slice {
		return nil
	}

	res := []map[string]interface{}{}
	for i := 0; i < v.Len(); i++ {
		res = append(res, marshal(v.Index(i).Interface()))
	}

	return res
}
