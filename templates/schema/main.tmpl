package main

import (
	"encoding/json"

	"{{.Config.ProjectPath}}/handler/{{.Schema}}/schema"

	"github.com/aws/aws-lambda-go/events"
	"github.com/aws/aws-lambda-go/lambda"
	"github.com/graphql-go/graphql"
)

var headers = map[string]string{
	"Content-Type":                     "application/json",
	"Access-Control-Allow-Origin":      "*",
	"Access-Control-Expose-Headers":    "Access-Control-Allow-Origin",
	"Access-Control-Allow-Credentials": "true",
	"Access-Control-Allow-Methods":     "GET,PUT,POST,DELETE,PATCH,OPTIONS",
}

type requestBody struct {
	Query          string                 `json:"query"`
	VariableValues map[string]interface{} `json:"variables"`
	OperationName  string                 `json:"operationName"`
}

func executeQuery(request requestBody, schema graphql.Schema) (*graphql.Result, error) {
	params := graphql.Params{
		Schema:         schema,
		VariableValues: request.VariableValues,
		RequestString:  request.Query,
		OperationName:  request.OperationName,
	}
	result := graphql.Do(params)

	if result.HasErrors() {
		return nil, result.Errors[0]
	}

	return result, nil
}

// Handler handles the incoming Request and responds with the Results of the GraphQL Query or an error
func Handler(request events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {
	requestBody := requestBody{}
	err := json.Unmarshal([]byte(request.Body), &requestBody)
	if err != nil {
		return events.APIGatewayProxyResponse{Headers:headers, Body: err.Error(), StatusCode: 400}, err
	}

	graphQLResult, err := executeQuery(requestBody, schema.Schema)
	if err != nil {
		return events.APIGatewayProxyResponse{Headers: headers, Body: err.Error(), StatusCode: 400}, err
	}

	responseJSON, _ := json.Marshal(graphQLResult)
	return events.APIGatewayProxyResponse{Headers: headers, Body: string(responseJSON[:]), StatusCode: 200}, nil
}

func main() {
	if local, err := strconv.ParseBool(os.Getenv("LOCAL")); err == nil && local {
		localHandler()
	} else {
		lambda.Start(Handler)
	}
}

func localHandler() {
	h := handler.New(&handler.Config{
		Schema: &schema.Schema,
		Pretty: true,
	})

	http.Handle("/v1", corsHeaders(h))
	http.ListenAndServe(":4000", nil)
}

func corsHeaders(next *handler.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		for key, value := range headers {
			w.Header().Set(key, value)
		}

		next.ContextHandler(r.Context(), w, r)
	})
}
